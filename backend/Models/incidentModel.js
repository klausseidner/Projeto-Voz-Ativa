///////////////////////////////////////////////////////////////////////////////////////////////////////
// Arquivo de Modelo de Incidente
///////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Importando dependências necessárias
///////////////////////////////////////////////////////////////////////////////////////////////////////
const db = require('../config/db'); // Importando a conexão com o banco de dados

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Função para criar um novo incidente
/////////////////////////////////////////////////////////////////////////////////////////////////////
exports.createIncident = async (incidentData) => {
  const { title, description, status, userId } = incidentData; // Capturando os dados do incidente
  const sql = 'INSERT INTO incidents (title, description, status, user_id) VALUES (?, ?, ?, ?)'; // Criando a query SQL para inserir um novo incidente
  const [result] = await db.execute(sql, [title, description, status, userId]); // Executando a query SQL
  return { id: result.insertId, title, description, status, userId }; // Retorna o novo incidente criado
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Função para obter todos os incidentes
/////////////////////////////////////////////////////////////////////////////////////////////////////
exports.getAllIncidents = async () => {
  const sql = 'SELECT * FROM incidents'; // Criando a query SQL para obter todos os incidentes
  const [rows] = await db.query(sql); // Executando a query SQL
  return rows; // Retorna todos os incidentes
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Função para obter um incidente por ID
/////////////////////////////////////////////////////////////////////////////////////////////////////
exports.getIncidentById = async (id) => {
  const sql = 'SELECT * FROM incidents WHERE id = ?'; // Criando a query SQL para obter um incidente por ID
  const [rows] = await db.query(sql, [id]); // Executando a query SQL
  return rows[0]; // Retorna o primeiro incidente encontrado
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Função para atualizar um incidente
/////////////////////////////////////////////////////////////////////////////////////////////////////
exports.updateIncident = async (id, incidentData) => {
  const { title, description, status } = incidentData; // Capturando os dados do incidente
  const sql = 'UPDATE incidents SET title = ?, description = ?, status = ? WHERE id = ?'; // Criando a query SQL para atualizar um incidente
  await db.execute(sql, [title, description, status, id]); // Executando a query SQL
  return { id, title, description, status }; // Retorna o incidente atualizado
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Função para deletar um incidente
/////////////////////////////////////////////////////////////////////////////////////////////////////
exports.deleteIncident = async (id) => {
  const sql = 'DELETE FROM incidents WHERE id = ?'; // Criando a query SQL para deletar um incidente
  const [result] = await db.execute(sql, [id]); // Executando a query SQL
  return result.affectedRows > 0; // Retorna true se um incidente foi deletado
};

/////////////////////////////////////////////////////////////////////////////////////////////////////